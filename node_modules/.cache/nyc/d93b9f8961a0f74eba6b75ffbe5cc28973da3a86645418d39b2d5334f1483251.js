var cov_28pxe5v0bl=function(){var path="/home/lenovo/nodefiles2/FHIR-Converter-master/src/e2e-test/regression-test/config/testcases-hl7v2.js";var hash="83f99460ac23d640553707cdab7c90c5a9b7c6af";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/lenovo/nodefiles2/FHIR-Converter-master/src/e2e-test/regression-test/config/testcases-hl7v2.js",statementMap:{"0":{start:{line:6,column:17},end:{line:10,column:1}},"1":{start:{line:12,column:0},end:{line:20,column:2}},"2":{start:{line:13,column:18},end:{line:13,column:21}},"3":{start:{line:14,column:4},end:{line:18,column:7}},"4":{start:{line:15,column:8},end:{line:17,column:9}},"5":{start:{line:16,column:12},end:{line:16,column:69}},"6":{start:{line:19,column:4},end:{line:19,column:17}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:17},end:{line:12,column:18}},loc:{start:{line:12,column:23},end:{line:20,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:21},end:{line:14,column:22}},loc:{start:{line:14,column:32},end:{line:18,column:5}},line:14}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"83f99460ac23d640553707cdab7c90c5a9b7c6af"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------
const patterns=(cov_28pxe5v0bl.s[0]++,[{template:'ADT_A01.hbs',data:['ADT01-23.hl7','ADT01-28.hl7']},{template:'VXU_V04.hbs',data:['VXU.hl7']},{template:'ORU_R01.hbs',data:['LAB-ORU-1.hl7','LAB-ORU-2.hl7','LRI_2.0-NG_CBC_Typ_Message.hl7']}]);cov_28pxe5v0bl.s[1]++;module.exports=()=>{cov_28pxe5v0bl.f[0]++;const cases=(cov_28pxe5v0bl.s[2]++,[]);cov_28pxe5v0bl.s[3]++;patterns.forEach(pattern=>{cov_28pxe5v0bl.f[1]++;cov_28pxe5v0bl.s[4]++;for(const dataFile of pattern.data){cov_28pxe5v0bl.s[5]++;cases.push({templateFile:pattern.template,dataFile});}});cov_28pxe5v0bl.s[6]++;return cases;};